// Yul Grammar

Block = '{' Statements '}'

Statements = Statement*

Statement =
  Block |
  FunctionDefinition |
  VariableDeclaration |
  Assignment |
  If |
  Expression |
  Switch |
  ForLoop |
  BreakContinue

FunctionDefinition =
  'function' Identifier '(' TypedIdentifierList? ')'
  ( '->' TypedIdentifierList )? Block

VariableDeclaration =
  'let' TypedIdentifierList ( ':=' Expression )?

Assignment =
  IdentifierList ':=' Expression

Expression =
  FunctionCall | Identifier | Literal

If =
  'if' Expression Block

Switch =
  'switch' Expression ( Case+ Default? | Default )

Case =
  'case' Literal Block

Default =
  'default' Block

ForLoop =
  'for' Block Expression Block Block

BreakContinue =
  'break' | 'continue'

FunctionCall =
  Identifier '(' ( Expression ( ',' Expression )* )? ')'

Identifier = [a-zA-Z_$] [a-zA-Z_$0-9]*

IdentifierList = Identifier ( ',' Identifier)*

TypeName = Identifier | BuiltinTypeName

BuiltinTypeName = 'bool' | 'u8' | 'u32' | 'u64' | 'u128' | 'u256'

TypedIdentifierList = Identifier ':' TypeName ( ',' Identifier ':' TypeName )*

Literal =
  (NumberLiteral | StringLiteral | HexLiteral | TrueLiteral | FalseLiteral) ':' TypeName

NumberLiteral = HexNumber | DecimalNumber

HexLiteral = 'hex' ('"' ([0-9a-fA-F]{2})* '"' | '\'' ([0-9a-fA-F]{2})* '\'')

StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"'

TrueLiteral = 'true'

FalseLiteral = 'false'

HexNumber = '0x' [0-9a-fA-F]+

DecimalNumber = [0-9]+


// Yul Object

Object = 'object' StringLiteral '{' Code ( Object | Data )* '}'

Code = 'code' Block

Data = 'data' StringLiteral ( HexLiteral | StringLiteral )

HexLiteral = 'hex' ('"' ([0-9a-fA-F]{2})* '"' | '\'' ([0-9a-fA-F]{2})* '\'')

StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"'
